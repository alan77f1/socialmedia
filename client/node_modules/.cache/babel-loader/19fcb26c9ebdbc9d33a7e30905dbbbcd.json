{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { createNotify, removeNotify } from \"../actions/notifyAction\";\nexport const createComment = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postDataAPI(\"comment\", data, auth.token);\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    }); // Socket\n\n    socket.emit(\"createComment\", newPost); // Notify\n\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? \"Đã nhắc đến bạn trong bình luận.\" : \"Đã bình luận trong bài đăng của bạn.\",\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = ({\n  comment,\n  post,\n  content,\n  auth\n}) => async dispatch => {\n  const newComments = EditData(post.comments, comment._id, { ...comment,\n    content\n  });\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    patchDataAPI(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  post,\n  comment,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n  const newPost = { ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"deleteComment\", newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n      const msg = {\n        id: item._id,\n        text: comment.reply ? \"Đã nhắc đến bạn trong bình luận.\" : \"Đã bình luận trong bài đăng của bạn.\",\n        recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/buiva/OneDrive/Máy tính/new/instagram-clone/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\r\nimport { POST_TYPES } from \"./postAction\";\r\nimport {\r\n  postDataAPI,\r\n  patchDataAPI,\r\n  deleteDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { createNotify, removeNotify } from \"../actions/notifyAction\";\r\n\r\nexport const createComment =\r\n  ({ post, newComment, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI(\"comment\", data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      // Socket\r\n      socket.emit(\"createComment\", newPost);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? \"Đã nhắc đến bạn trong bình luận.\"\r\n          : \"Đã bình luận trong bài đăng của bạn.\",\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const updateComment =\r\n  ({ comment, post, content, auth }) =>\r\n  async (dispatch) => {\r\n    const newComments = EditData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n    try {\r\n      patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likeComment =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unLikeComment =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: DeleteData(comment.likes, auth.user._id),\r\n    };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const deleteComment =\r\n  ({ post, comment, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id)\r\n      ),\r\n    };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit(\"deleteComment\", newPost);\r\n    try {\r\n      deleteArr.forEach((item) => {\r\n        deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? \"Đã nhắc đến bạn trong bình luận.\"\r\n            : \"Đã bình luận trong bài đăng của bạn.\",\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n\r\n        dispatch(removeNotify({ msg, auth, socket }));\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}