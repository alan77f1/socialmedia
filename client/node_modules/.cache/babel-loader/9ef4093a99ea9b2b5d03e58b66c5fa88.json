{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\"\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (images.length > 0) media = await imageUpload(images);\n    const res = await postDataAPI(\"posts\", {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // Notify\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"đã thêm bài đăng mới.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI(\"posts\", token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: \"thích bài đăng của bạn.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: \"thích bài đăng của bạn.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // Notify\n\n    const msg = {\n      id: post._id,\n      text: \"đã thêm bài đăng mới.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/buiva/OneDrive/Máy tính/new/instagram-clone/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","imageUpload","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,aAJF,QAKO,uBALP;AAMA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AAEA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,WAAW,EAAE,aADW;AAExBC,EAAAA,YAAY,EAAE,cAFU;AAGxBC,EAAAA,SAAS,EAAE,WAHa;AAIxBC,EAAAA,WAAW,EAAE,aAJW;AAKxBC,EAAAA,QAAQ,EAAE,UALc;AAMxBC,EAAAA,WAAW,EAAE;AANW,CAAnB;AASP,OAAO,MAAMC,UAAU,GACrB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,IAAnB;AAAyBC,EAAAA;AAAzB,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAI;AACFD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAApC,KAAD,CAAR;AACA,QAAIR,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuBL,KAAK,GAAG,MAAMpB,WAAW,CAACgB,MAAD,CAAzB;AAEvB,UAAMU,GAAG,GAAG,MAAMzB,WAAW,CAC3B,OAD2B,EAE3B;AAAEc,MAAAA,OAAF;AAAWC,MAAAA,MAAM,EAAEI;AAAnB,KAF2B,EAG3BH,IAAI,CAACU,KAHsB,CAA7B;AAMAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,UAAU,CAACC,WADV;AAEPe,MAAAA,OAAO,EAAE,EAAE,GAAGG,GAAG,CAACE,IAAJ,CAASC,OAAd;AAAuBC,QAAAA,IAAI,EAAEb,IAAI,CAACa;AAAlC;AAFF,KAAD,CAAR;AAKAX,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAApC,KAAD,CAAR,CAfE,CAiBF;;AACA,UAAMO,GAAG,GAAG;AACVC,MAAAA,EAAE,EAAEN,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBI,GADX;AAEVC,MAAAA,IAAI,EAAE,uBAFI;AAGVC,MAAAA,UAAU,EAAET,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,IAAjB,CAAsBM,SAHxB;AAIVC,MAAAA,GAAG,EAAG,SAAQX,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBI,GAAI,EAJzB;AAKVlB,MAAAA,OALU;AAMVuB,MAAAA,KAAK,EAAElB,KAAK,CAAC,CAAD,CAAL,CAASiB;AANN,KAAZ;AASAlB,IAAAA,QAAQ,CAACd,YAAY,CAAC;AAAE0B,MAAAA,GAAF;AAAOd,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACD,GA5BD,CA4BE,OAAOqB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAtCI;AAwCP,OAAO,MAAMW,QAAQ,GAAIf,KAAD,IAAW,MAAOR,QAAP,IAAoB;AACrD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEd,UAAU,CAACE,YAAnB;AAAiCc,MAAAA,OAAO,EAAE;AAA1C,KAAD,CAAR;AACA,UAAMG,GAAG,GAAG,MAAMxB,UAAU,CAAC,OAAD,EAAUyB,KAAV,CAA5B;AAEAR,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,UAAU,CAACG,SADV;AAEPa,MAAAA,OAAO,EAAE,EAAE,GAAGG,GAAG,CAACE,IAAT;AAAee,QAAAA,IAAI,EAAE;AAArB;AAFF,KAAD,CAAR;AAKAxB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEd,UAAU,CAACE,YAAnB;AAAiCc,MAAAA,OAAO,EAAE;AAA1C,KAAD,CAAR;AACD,GAVD,CAUE,OAAOgB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAjBM;AAmBP,OAAO,MAAMa,UAAU,GACrB,CAAC;AAAE7B,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,IAAnB;AAAyB4B,EAAAA;AAAzB,CAAD,KACA,MAAO1B,QAAP,IAAoB;AAClB,MAAIC,KAAK,GAAG,EAAZ;AACA,QAAM0B,SAAS,GAAG9B,MAAM,CAAC+B,MAAP,CAAeC,GAAD,IAAS,CAACA,GAAG,CAACX,GAA5B,CAAlB;AACA,QAAMY,SAAS,GAAGjC,MAAM,CAAC+B,MAAP,CAAeC,GAAD,IAASA,GAAG,CAACX,GAA3B,CAAlB;AAEA,MACEQ,MAAM,CAAC9B,OAAP,KAAmBA,OAAnB,IACA+B,SAAS,CAACrB,MAAV,KAAqB,CADrB,IAEAwB,SAAS,CAACxB,MAAV,KAAqBoB,MAAM,CAAC7B,MAAP,CAAcS,MAHrC,EAKE;;AAEF,MAAI;AACFN,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAApC,KAAD,CAAR;AACA,QAAIsB,SAAS,CAACrB,MAAV,GAAmB,CAAvB,EAA0BL,KAAK,GAAG,MAAMpB,WAAW,CAAC8C,SAAD,CAAzB;AAE1B,UAAMpB,GAAG,GAAG,MAAMvB,YAAY,CAC3B,QAAO0C,MAAM,CAACZ,GAAI,EADS,EAE5B;AACElB,MAAAA,OADF;AAEEC,MAAAA,MAAM,EAAE,CAAC,GAAGiC,SAAJ,EAAe,GAAG7B,KAAlB;AAFV,KAF4B,EAM5BH,IAAI,CAACU,KANuB,CAA9B;AASAR,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEd,UAAU,CAACI,WAAnB;AAAgCY,MAAAA,OAAO,EAAEG,GAAG,CAACE,IAAJ,CAASC;AAAlD,KAAD,CAAR;AAEAV,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KAApB;AAA2BC,MAAAA,OAAO,EAAE;AAAE2B,QAAAA,OAAO,EAAExB,GAAG,CAACE,IAAJ,CAASG;AAApB;AAApC,KAAD,CAAR;AACD,GAhBD,CAgBE,OAAOQ,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CApCI;AAsCP,OAAO,MAAMoB,QAAQ,GACnB,CAAC;AAAEC,EAAAA,IAAF;AAAQnC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,QAAMU,OAAO,GAAG,EAAE,GAAGuB,IAAL;AAAWC,IAAAA,KAAK,EAAE,CAAC,GAAGD,IAAI,CAACC,KAAT,EAAgBpC,IAAI,CAACa,IAArB;AAAlB,GAAhB;AACAX,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEd,UAAU,CAACI,WAAnB;AAAgCY,IAAAA,OAAO,EAAEM;AAAzC,GAAD,CAAR;AAEAX,EAAAA,MAAM,CAACoC,IAAP,CAAY,UAAZ,EAAwBzB,OAAxB;;AAEA,MAAI;AACF,UAAM1B,YAAY,CAAE,QAAOiD,IAAI,CAACnB,GAAI,OAAlB,EAA0B,IAA1B,EAAgChB,IAAI,CAACU,KAArC,CAAlB,CADE,CAGF;;AACA,UAAMI,GAAG,GAAG;AACVC,MAAAA,EAAE,EAAEf,IAAI,CAACa,IAAL,CAAUG,GADJ;AAEVC,MAAAA,IAAI,EAAE,yBAFI;AAGVC,MAAAA,UAAU,EAAE,CAACiB,IAAI,CAACtB,IAAL,CAAUG,GAAX,CAHF;AAIVI,MAAAA,GAAG,EAAG,SAAQe,IAAI,CAACnB,GAAI,EAJb;AAKVlB,MAAAA,OAAO,EAAEqC,IAAI,CAACrC,OALJ;AAMVuB,MAAAA,KAAK,EAAEc,IAAI,CAACpC,MAAL,CAAY,CAAZ,EAAeqB;AANZ,KAAZ;AASAlB,IAAAA,QAAQ,CAACd,YAAY,CAAC;AAAE0B,MAAAA,GAAF;AAAOd,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACD,GAdD,CAcE,OAAOqB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CA5BI;AA8BP,OAAO,MAAMwB,UAAU,GACrB,CAAC;AAAEH,EAAAA,IAAF;AAAQnC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,QAAMU,OAAO,GAAG,EACd,GAAGuB,IADW;AAEdC,IAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAmBS,IAAD,IAAUA,IAAI,CAACvB,GAAL,KAAahB,IAAI,CAACa,IAAL,CAAUG,GAAnD;AAFO,GAAhB;AAIAd,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEd,UAAU,CAACI,WAAnB;AAAgCY,IAAAA,OAAO,EAAEM;AAAzC,GAAD,CAAR;AAEAX,EAAAA,MAAM,CAACoC,IAAP,CAAY,YAAZ,EAA0BzB,OAA1B;;AAEA,MAAI;AACF,UAAM1B,YAAY,CAAE,QAAOiD,IAAI,CAACnB,GAAI,SAAlB,EAA4B,IAA5B,EAAkChB,IAAI,CAACU,KAAvC,CAAlB,CADE,CAGF;;AACA,UAAMI,GAAG,GAAG;AACVC,MAAAA,EAAE,EAAEf,IAAI,CAACa,IAAL,CAAUG,GADJ;AAEVC,MAAAA,IAAI,EAAE,yBAFI;AAGVC,MAAAA,UAAU,EAAE,CAACiB,IAAI,CAACtB,IAAL,CAAUG,GAAX,CAHF;AAIVI,MAAAA,GAAG,EAAG,SAAQe,IAAI,CAACnB,GAAI;AAJb,KAAZ;AAMAd,IAAAA,QAAQ,CAACb,YAAY,CAAC;AAAEyB,MAAAA,GAAF;AAAOd,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACD,GAXD,CAWE,OAAOqB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CA5BI;AA8BP,OAAO,MAAM0B,OAAO,GAClB,CAAC;AAAEC,EAAAA,UAAF;AAAc1B,EAAAA,EAAd;AAAkBf,EAAAA;AAAlB,CAAD,KACA,MAAOE,QAAP,IAAoB;AAClB,MAAIuC,UAAU,CAACC,KAAX,CAAkBP,IAAD,IAAUA,IAAI,CAACnB,GAAL,KAAaD,EAAxC,CAAJ,EAAiD;AAC/C,QAAI;AACF,YAAMN,GAAG,GAAG,MAAMxB,UAAU,CAAE,QAAO8B,EAAG,EAAZ,EAAef,IAAI,CAACU,KAApB,CAA5B;AACAR,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEd,UAAU,CAACK,QAAnB;AAA6BW,QAAAA,OAAO,EAAEG,GAAG,CAACE,IAAJ,CAASwB;AAA/C,OAAD,CAAR;AACD,KAHD,CAGE,OAAOb,GAAP,EAAY;AACZpB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,QAAAA,OAAO,EAAE;AAAEiB,UAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAdI;AAgBP,OAAO,MAAM6B,UAAU,GACrB,CAAC;AAAER,EAAAA,IAAF;AAAQnC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClBA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEd,UAAU,CAACM,WAAnB;AAAgCU,IAAAA,OAAO,EAAE6B;AAAzC,GAAD,CAAR;;AAEA,MAAI;AACF,UAAM1B,GAAG,GAAG,MAAMtB,aAAa,CAAE,QAAOgD,IAAI,CAACnB,GAAI,EAAlB,EAAqBhB,IAAI,CAACU,KAA1B,CAA/B,CADE,CAGF;;AACA,UAAMI,GAAG,GAAG;AACVC,MAAAA,EAAE,EAAEoB,IAAI,CAACnB,GADC;AAEVC,MAAAA,IAAI,EAAE,uBAFI;AAGVC,MAAAA,UAAU,EAAET,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,IAAjB,CAAsBM,SAHxB;AAIVC,MAAAA,GAAG,EAAG,SAAQe,IAAI,CAACnB,GAAI;AAJb,KAAZ;AAMAd,IAAAA,QAAQ,CAACb,YAAY,CAAC;AAAEyB,MAAAA,GAAF;AAAOd,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACD,GAXD,CAWE,OAAOqB,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAtBI;AAwBP,OAAO,MAAM8B,QAAQ,GACnB,CAAC;AAAET,EAAAA,IAAF;AAAQnC,EAAAA;AAAR,CAAD,KACA,MAAOE,QAAP,IAAoB;AAClB,QAAM2C,OAAO,GAAG,EAAE,GAAG7C,IAAI,CAACa,IAAV;AAAgBiC,IAAAA,KAAK,EAAE,CAAC,GAAG9C,IAAI,CAACa,IAAL,CAAUiC,KAAd,EAAqBX,IAAI,CAACnB,GAA1B;AAAvB,GAAhB;AACAd,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEtB,WAAW,CAACiE,IAApB;AAA0BzC,IAAAA,OAAO,EAAE,EAAE,GAAGN,IAAL;AAAWa,MAAAA,IAAI,EAAEgC;AAAjB;AAAnC,GAAD,CAAR;;AAEA,MAAI;AACF,UAAM3D,YAAY,CAAE,YAAWiD,IAAI,CAACnB,GAAI,EAAtB,EAAyB,IAAzB,EAA+BhB,IAAI,CAACU,KAApC,CAAlB;AACD,GAFD,CAEE,OAAOY,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAdI;AAgBP,OAAO,MAAMkC,UAAU,GACrB,CAAC;AAAEb,EAAAA,IAAF;AAAQnC,EAAAA;AAAR,CAAD,KACA,MAAOE,QAAP,IAAoB;AAClB,QAAM2C,OAAO,GAAG,EACd,GAAG7C,IAAI,CAACa,IADM;AAEdiC,IAAAA,KAAK,EAAE9C,IAAI,CAACa,IAAL,CAAUiC,KAAV,CAAgBhB,MAAhB,CAAwBf,EAAD,IAAQA,EAAE,KAAKoB,IAAI,CAACnB,GAA3C;AAFO,GAAhB;AAIAd,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEtB,WAAW,CAACiE,IAApB;AAA0BzC,IAAAA,OAAO,EAAE,EAAE,GAAGN,IAAL;AAAWa,MAAAA,IAAI,EAAEgC;AAAjB;AAAnC,GAAD,CAAR;;AAEA,MAAI;AACF,UAAM3D,YAAY,CAAE,cAAaiD,IAAI,CAACnB,GAAI,EAAxB,EAA2B,IAA3B,EAAiChB,IAAI,CAACU,KAAtC,CAAlB;AACD,GAFD,CAEE,OAAOY,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBG;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAjBI","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport {\r\n  postDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  deleteDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\n\r\nexport const POST_TYPES = {\r\n  CREATE_POST: \"CREATE_POST\",\r\n  LOADING_POST: \"LOADING_POST\",\r\n  GET_POSTS: \"GET_POSTS\",\r\n  UPDATE_POST: \"UPDATE_POST\",\r\n  GET_POST: \"GET_POST\",\r\n  DELETE_POST: \"DELETE_POST\",\r\n};\r\n\r\nexport const createPost =\r\n  ({ content, images, auth, socket }) =>\r\n  async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        \"posts\",\r\n        { content, images: media },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: { ...res.data.newPost, user: auth.user },\r\n      });\r\n\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newPost._id,\r\n        text: \"đã thêm bài đăng mới.\",\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${res.data.newPost._id}`,\r\n        content,\r\n        image: media[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n    const res = await getDataAPI(\"posts\", token);\r\n\r\n    dispatch({\r\n      type: POST_TYPES.GET_POSTS,\r\n      payload: { ...res.data, page: 2 },\r\n    });\r\n\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\nexport const updatePost =\r\n  ({ content, images, auth, status }) =>\r\n  async (dispatch) => {\r\n    let media = [];\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgNewUrl.length === 0 &&\r\n      imgOldUrl.length === status.images.length\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        {\r\n          content,\r\n          images: [...imgOldUrl, ...media],\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\r\n\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit(\"likePost\", newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"thích bài đăng của bạn.\",\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unLikePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit(\"unLikePost\", newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"thích bài đăng của bạn.\",\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getPost =\r\n  ({ detailPost, id, auth }) =>\r\n  async (dispatch) => {\r\n    if (detailPost.every((post) => post._id !== id)) {\r\n      try {\r\n        const res = await getDataAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: GLOBALTYPES.ALERT,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\nexport const deletePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\r\n\r\n    try {\r\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: post._id,\r\n        text: \"đã thêm bài đăng mới.\",\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${post._id}`,\r\n      };\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const savePost =\r\n  ({ post, auth }) =>\r\n  async (dispatch) => {\r\n    const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n    try {\r\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unSavePost =\r\n  ({ post, auth }) =>\r\n  async (dispatch) => {\r\n    const newUser = {\r\n      ...auth.user,\r\n      saved: auth.user.saved.filter((id) => id !== post._id),\r\n    };\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n    try {\r\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}