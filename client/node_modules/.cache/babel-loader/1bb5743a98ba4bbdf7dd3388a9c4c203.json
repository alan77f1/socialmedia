{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"../actions/notifyAction\";\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  FOLLOW: \"FOLLOW\",\n  UNFOLLOW: \"UNFOLLOW\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POST\"\n};\nexport const getProfileUsers = ({\n  id,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: PROFILE_TYPES.GET_ID,\n    payload: id\n  });\n\n  try {\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: true\n    });\n    const res = getDataAPI(`/user/${id}`, auth.token);\n    const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n    const users = await res;\n    const posts = await res1;\n    dispatch({\n      type: PROFILE_TYPES.GET_USER,\n      payload: users.data\n    });\n    dispatch({\n      type: PROFILE_TYPES.GET_POSTS,\n      payload: { ...posts.data,\n        _id: id,\n        page: 2\n      }\n    });\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Vui lòng thêm tên đầy đủ của bạn.\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Tên quá dài.\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Mô tả ít hơn 200 kí tự.\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const follow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: [...user.followers, auth.user]\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: [...item.followers, auth.user]\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.FOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: [...auth.user.following, newUser]\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n    socket.emit(\"follow\", res.data.newUser); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: \"bắt đầu theo dõi bạn.\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unfollow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: DeleteData(user.followers, auth.user._id)\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: DeleteData(item.followers, auth.user._id)\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.UNFOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: DeleteData(auth.user.following, newUser._id)\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n    socket.emit(\"unFollow\", res.data.newUser); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: \"bắt đầu theo dõi bạn.\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/buiva/OneDrive/Máy tính/new/instagram-clone/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","DeleteData","getDataAPI","patchDataAPI","imageUpload","createNotify","removeNotify","PROFILE_TYPES","LOADING","GET_USER","FOLLOW","UNFOLLOW","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","follow","socket","newUser","every","item","followers","forEach","following","emit","text","recipients","unfollow"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\r\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { createNotify, removeNotify } from \"../actions/notifyAction\";\r\n\r\nexport const PROFILE_TYPES = {\r\n  LOADING: \"LOADING_PROFILE\",\r\n  GET_USER: \"GET_PROFILE_USER\",\r\n  FOLLOW: \"FOLLOW\",\r\n  UNFOLLOW: \"UNFOLLOW\",\r\n  GET_ID: \"GET_PROFILE_ID\",\r\n  GET_POSTS: \"GET_PROFILE_POSTS\",\r\n  UPDATE_POST: \"UPDATE_PROFILE_POST\",\r\n};\r\n\r\nexport const getProfileUsers =\r\n  ({ id, auth }) =>\r\n  async (dispatch) => {\r\n    dispatch({ type: PROFILE_TYPES.GET_ID, payload: id });\r\n\r\n    try {\r\n      dispatch({ type: PROFILE_TYPES.LOADING, payload: true });\r\n      const res = getDataAPI(`/user/${id}`, auth.token);\r\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\r\n\r\n      const users = await res;\r\n      const posts = await res1;\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.GET_USER,\r\n        payload: users.data,\r\n      });\r\n\r\n      dispatch({\r\n        type: PROFILE_TYPES.GET_POSTS,\r\n        payload: { ...posts.data, _id: id, page: 2 },\r\n      });\r\n\r\n      dispatch({ type: PROFILE_TYPES.LOADING, payload: false });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const updateProfileUser =\r\n  ({ userData, avatar, auth }) =>\r\n  async (dispatch) => {\r\n    if (!userData.fullname)\r\n      return dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: \"Vui lòng thêm tên đầy đủ của bạn.\" },\r\n      });\r\n\r\n    if (userData.fullname.length > 25)\r\n      return dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: \"Tên quá dài.\" },\r\n      });\r\n\r\n    if (userData.story.length > 200)\r\n      return dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: \"Mô tả ít hơn 200 kí tự.\" },\r\n      });\r\n\r\n    try {\r\n      let media;\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n\r\n      if (avatar) media = await imageUpload([avatar]);\r\n\r\n      const res = await patchDataAPI(\r\n        \"user\",\r\n        {\r\n          ...userData,\r\n          avatar: avatar ? media[0].url : auth.user.avatar,\r\n        },\r\n        auth.token\r\n      );\r\n\r\n      dispatch({\r\n        type: GLOBALTYPES.AUTH,\r\n        payload: {\r\n          ...auth,\r\n          user: {\r\n            ...auth.user,\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar,\r\n          },\r\n        },\r\n      });\r\n\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const follow =\r\n  ({ users, user, auth, socket }) =>\r\n  async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user._id)) {\r\n      newUser = { ...user, followers: [...user.followers, auth.user] };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = { ...item, followers: [...item.followers, auth.user] };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.FOLLOW, payload: newUser });\r\n\r\n    dispatch({\r\n      type: GLOBALTYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, following: [...auth.user.following, newUser] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `user/${user._id}/follow`,\r\n        null,\r\n        auth.token\r\n      );\r\n      socket.emit(\"follow\", res.data.newUser);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"bắt đầu theo dõi bạn.\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unfollow =\r\n  ({ users, user, auth, socket }) =>\r\n  async (dispatch) => {\r\n    let newUser;\r\n\r\n    if (users.every((item) => item._id !== user._id)) {\r\n      newUser = {\r\n        ...user,\r\n        followers: DeleteData(user.followers, auth.user._id),\r\n      };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = {\r\n            ...item,\r\n            followers: DeleteData(item.followers, auth.user._id),\r\n          };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.UNFOLLOW, payload: newUser });\r\n\r\n    dispatch({\r\n      type: GLOBALTYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: {\r\n          ...auth.user,\r\n          following: DeleteData(auth.user.following, newUser._id),\r\n        },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await patchDataAPI(\r\n        `user/${user._id}/unfollow`,\r\n        null,\r\n        auth.token\r\n      );\r\n      socket.emit(\"unFollow\", res.data.newUser);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"bắt đầu theo dõi bạn.\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}